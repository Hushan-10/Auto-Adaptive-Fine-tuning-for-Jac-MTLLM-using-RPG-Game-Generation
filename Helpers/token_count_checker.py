from transformers import AutoTokenizer

MODEL_NAME = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"

data = {
    "system": "This is a task you must complete by returning only the output.\nDo not include explanations, code, or extra textâ€”only the result.\n",
    "input": "create_next_map\n\nself = LevelManager(current_level=10, current_difficulty=5, prev_levels=[Level(name=8, difficulty=5, time=15.225377082824707, width=20, height=20, num_wall=10, num_enemies=7), Level(name=9, difficulty=6, time=17.438076734542847, width=22, height=22, num_wall=11, num_enemies=8), Level(name=10, difficulty=6, time=15.65295147895813, width=24, height=24, num_wall=12, num_enemies=9), Level(name=11, difficulty=7, time=16, width=26, height=26, num_wall=13, num_enemies=10)], prev_level_maps=[Map_tiles(level=Level(name=8, difficulty=5, time=11, width=20, height=20, num_wall=10, num_enemies=7), walls=[Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=0, y=19)), Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=19, y=0)), Wall(start_pos=Position(x=19, y=0), end_pos=Position(x=19, y=19)), Wall(start_pos=Position(x=0, y=19), end_pos=Position(x=19, y=19)), Wall(start_pos=Position(x=7, y=7), end_pos=Position(x=7, y=14)), Wall(start_pos=Position(x=10, y=3), end_pos=Position(x=10, y=9)), Wall(start_pos=Position(x=4, y=5), end_pos=Position(x=15, y=5)), Wall(start_pos=Position(x=1, y=8), end_pos=Position(x=1, y=11)), Wall(start_pos=Position(x=14, y=4), end_pos=Position(x=19, y=4)), Wall(start_pos=Position(x=2, y=13), end_pos=Position(x=2, y=17))], small_obstacles=[Position(x=5, y=5), Position(x=6, y=1), Position(x=12, y=12), Position(x=3, y=3), Position(x=17, y=14)], enemies=[Position(x=1, y=1), Position(x=19, y=19), Position(x=10, y=10), Position(x=5, y=5), Position(x=15, y=7), Position(x=14, y=8), Position(x=8, y=4)], player_pos=Position(x=1, y=1)), Map_tiles(level=Level(name=9, difficulty=6, time=16, width=22, height=22, num_wall=11, num_enemies=8), walls=[Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=0, y=21)), Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=21, y=0)), Wall(start_pos=Position(x=21, y=0), end_pos=Position(x=21, y=21)), Wall(start_pos=Position(x=0, y=21), end_pos=Position(x=21, y=21)), Wall(start_pos=Position(x=10, y=10), end_pos=Position(x=10, y=15)), Wall(start_pos=Position(x=3, y=3), end_pos=Position(x=3, y=17)), Wall(start_pos=Position(x=5, y=1), end_pos=Position(x=5, y=6)), Wall(start_pos=Position(x=15, y=5), end_pos=Position(x=15, y=10)), Wall(start_pos=Position(x=7, y=8), end_pos=Position(x=7, y=12)), Wall(start_pos=Position(x=1, y=12), end_pos=Position(x=1, y=16)), Wall(start_pos=Position(x=17, y=14), end_pos=Position(x=21, y=14))], small_obstacles=[Position(x=2, y=5), Position(x=4, y=10), Position(x=8, y=1), Position(x=20, y=20), Position(x=1, y=17), Position(x=13, y=3), Position(x=9, y=11), Position(x=14, y=8)], enemies=[Position(x=5, y=3), Position(x=2, y=2), Position(x=18, y=18), Position(x=12, y=10), Position(x=15, y=15), Position(x=6, y=4), Position(x=19, y=1), Position(x=1, y=1)], player_pos=Position(x=1, y=1)), Map_tiles(level=Level(name=10, difficulty=6, time=18, width=24, height=24, num_wall=12, num_enemies=9), walls=[Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=0, y=23)), Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=23, y=0)), Wall(start_pos=Position(x=23, y=0), end_pos=Position(x=23, y=23)), Wall(start_pos=Position(x=0, y=23), end_pos=Position(x=23, y=23)), Wall(start_pos=Position(x=5, y=5), end_pos=Position(x=5, y=15)), Wall(start_pos=Position(x=10, y=10), end_pos=Position(x=10, y=18)), Wall(start_pos=Position(x=1, y=12), end_pos=Position(x=1, y=17)), Wall(start_pos=Position(x=15, y=5), end_pos=Position(x=15, y=10)), Wall(start_pos=Position(x=7, y=8), end_pos=Position(x=7, y=20)), Wall(start_pos=Position(x=17, y=14), end_pos=Position(x=23, y=14)), Wall(start_pos=Position(x=2, y=20), end_pos=Position(x=2, y=23)), Wall(start_pos=Position(x=20, y=1), end_pos=Position(x=20, y=5))], small_obstacles=[Position(x=3, y=3), Position(x=8, y=1), Position(x=2, y=15), Position(x=1, y=14), Position(x=9, y=10), Position(x=15, y=7), Position(x=10, y=5), Position(x=12, y=12)], enemies=[Position(x=1, y=1), Position(x=18, y=18), Position(x=15, y=15), Position(x=6, y=4), Position(x=19, y=1), Position(x=12, y=10), Position(x=5, y=3), Position(x=5, y=10), Position(x=14, y=8)], player_pos=Position(x=1, y=1))])\nlevel = Level(name=11, difficulty=7, time=16, width=26, height=26, num_wall=13, num_enemies=10)",
    "output": "{\"level\": {\"name\": 11, \"difficulty\": 7, \"time\": 16, \"width\": 26, \"height\": 26, \"num_wall\": 13, \"num_enemies\": 10}, \"walls\": [{\"start_pos\": {\"x\": 0, \"y\": 0}, \"end_pos\": {\"x\": 0, \"y\": 25}}, {\"start_pos\": {\"x\": 0, \"y\": 0}, \"end_pos\": {\"x\": 25, \"y\": 0}}, {\"start_pos\": {\"x\": 25, \"y\": 0}, \"end_pos\": {\"x\": 25, \"y\": 25}}, {\"start_pos\": {\"x\": 0, \"y\": 25}, \"end_pos\": {\"x\": 25, \"y\": 25}}, {\"start_pos\": {\"x\": 8, \"y\": 8}, \"end_pos\": {\"x\": 8, \"y\": 18}}, {\"start_pos\": {\"x\": 12, \"y\": 6}, \"end_pos\": {\"x\": 12, \"y\": 20}}, {\"start_pos\": {\"x\": 5, \"y\": 5}, \"end_pos\": {\"x\": 20, \"y\": 5}}, {\"start_pos\": {\"x\": 1, \"y\": 10}, \"end_pos\": {\"x\": 1, \"y\": 15}}, {\"start_pos\": {\"x\": 15, \"y\": 5}, \"end_pos\": {\"x\": 15, \"y\": 12}}, {\"start_pos\": {\"x\": 3, \"y\": 20}, \"end_pos\": {\"x\": 3, \"y\": 25}}, {\"start_pos\": {\"x\": 20, \"y\": 1}, \"end_pos\": {\"x\": 20, \"y\": 10}}, {\"start_pos\": {\"x\": 18, \"y\": 14}, \"end_pos\": {\"x\": 25, \"y\": 14}}, {\"start_pos\": {\"x\": 10, \"y\": 3}, \"end_pos\": {\"x\": 10, \"y\": 9}}], \"small_obstacles\": [{\"x\": 4, \"y\": 4}, {\"x\": 7, \"y\": 2}, {\"x\": 11, \"y\": 11}, {\"x\": 5, \"y\": 15}, {\"x\": 22, \"y\": 22}, {\"x\": 1, \"y\": 21}, {\"x\": 9, \"y\": 8}, {\"x\": 14, \"y\": 18}], \"enemies\": [{\"x\": 2, \"y\": 2}, {\"x\": 3, \"y\": 3}, {\"x\": 14, \"y\": 14}, {\"x\": 20, \"y\": 20}, {\"x\": 12, \"y\": 12}, {\"x\": 4, \"y\": 4}, {\"x\": 5, \"y\": 1}, {\"x\": 19, \"y\": 25}, {\"x\": 15, \"y\": 15}, {\"x\": 7, \"y\": 5}], \"player_pos\": {\"x\": 1, \"y\": 1}}"
}

prompt_text = f"{data['system']}\n\n{data['input']}\n{data['output']}"

tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, use_fast=True)

tokens_all = tokenizer.encode(prompt_text)
print(f"Total tokens (system + input + output): {len(tokens_all)}")

tokens_no_output = tokenizer.encode(f"{data['system']}\n\n{data['input']}")
print(f"Tokens (system + input only): {len(tokens_no_output)}")